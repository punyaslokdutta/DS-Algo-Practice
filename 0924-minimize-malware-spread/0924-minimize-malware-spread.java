class Solution {
    private int dfs(int[][] graph, int u, boolean[] visited, boolean[] initial) {
        if(initial[u]) return 0;
        visited[u] = true;
        int count = 1;
        for(int v = 0; v < graph[u].length; v++) {
            if(!visited[v] && graph[u][v] == 1) {
                int c = dfs(graph, v, visited, initial);
                if(c == 0) return 0;
                count += c;
            }
        }
        return count;
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int n = graph.length, ans = initial[0], max = 0;
        boolean[] init = new boolean[n];
        for(int u: initial) init[u] = true;
        for(int u: initial) {
            init[u] = false;
            int count = dfs(graph, u, new boolean[n], init);
            if(count > max) {
                max = count;
                ans = u;
            }
            init[u] = true;
        }
        return ans;
    }
}